// Generated by CoffeeScript 1.3.3
var Loop, Loops,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Loops = (function(_super) {

  __extends(Loops, _super);

  function Loops(models, options) {
    var data, event, run, _ref;
    if (models == null) {
      models = [];
    }
    if (options == null) {
      options = {};
    }
    this.model = Loop;
    data = _.union(models, _.toArray(this.localStorage.data));
    Loops.__super__.constructor.call(this, data, options);
    this.localStorage.save();
    _ref = this.events;
    for (event in _ref) {
      run = _ref[event];
      this.on(event, run);
    }
  }

  Loops.prototype.parse = 'loops';

  Loops.prototype.localStorage = new Store('loops');

  Loops.prototype.events = {
    'add': function(model) {
      return this.sync('create', model.attributes);
    },
    'remove': function(model) {
      return this.sync('delete', model.attributes);
    },
    'reset': function(model) {
      localStorage.removeItem('loops');
      return this.localStorage = new Store('loops');
    },
    'change': function(model, changes) {
      var bool, change, _results;
      _results = [];
      for (change in changes) {
        bool = changes[change];
        if (bool) {
          _results.push(this.sync('update', model.attributes));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }
  };

  Loops.prototype.sync = Backbone.sync.store;

  Loops.prototype.save = function() {
    return this.localStorage.save();
  };

  return Loops;

})(Backbone.Collection);

Loop = (function(_super) {

  __extends(Loop, _super);

  function Loop(attributes, options) {
    attributes.id || (attributes.id = S4());
    attributes = _.extend({}, {
      amount: 0,
      data: new Object(),
      range: 'day',
      period: 'today'
    }, attributes);
    Loop.__super__.constructor.call(this, attributes, options);
  }

  Loop.prototype.rangeReset = function(range) {
    switch (range) {
      case 'hours':
        return function(date) {
          return +moment(date).hours();
        };
      case 'days':
        return function(date) {
          return +moment(date).sod();
        };
      case 'weeks':
        return function(date) {
          return +moment(date).sod().day(0);
        };
      case 'months':
        return function(date) {
          return +moment(date).sod().date(1);
        };
      default:
        return function(date) {
          return +date;
        };
    }
  };

  Loop.prototype.resetRange = function(point, reset) {
    var time;
    time = +point.time;
    return +moment(reset(time));
  };

  Loop.prototype.createBins = function(range) {
    var bins, diff, end, i, reset, start, _i, _name;
    reset = this[_name = "" + range + "Reset"] || (this[_name] = this.rangeReset(range));
    bins = [];
    start = reset(this.startTime);
    end = reset(this.endTime);
    diff = moment(end).diff(moment(start), range);
    if (diff === 0) {
      diff === 1;
    }
    for (i = _i = 0; 0 <= diff ? _i <= diff : _i >= diff; i = 0 <= diff ? ++_i : --_i) {
      bins.push(+moment(start).add(range, i));
    }
    return bins;
  };

  Loop.prototype.migrate = function(mappings, schemas, labels, modelData) {
    var bins, data, i, index, key, mapping, x, _i, _j, _len, _ref;
    if (modelData == null) {
      modelData = this.modelData;
    }
    if (arguments.length === 0) {
      return;
    }
    data = {};
    for (key in mappings) {
      mapping = mappings[key];
      bins = labels[key];
      if (bins != null) {
        data[key] = new Array(bins.length);
        for (i = _i = 0, _ref = bins.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          data[key][i] = _.copy(_.extend({}, schemas[key], {
            label: bins[i]
          }));
        }
      } else {
        data[key] = new Array(this.modelData.length);
      }
    }
    for (i = _j = 0, _len = modelData.length; _j < _len; i = ++_j) {
      x = modelData[i];
      for (key in mappings) {
        mapping = mappings[key];
        bins = labels[key];
        if ((labels[key] != null) && (schemas[key] != null)) {
          index = bins.indexOf(mapping(x));
          if (index === -1) {
            continue;
          }
          data[key][index].points.push(x);
          if (schemas[key].sum != null) {
            data[key][index].sum += x.val;
          }
        } else {
          data[key][i] = mapping(x, i);
        }
      }
    }
    return data;
  };

  Loop.prototype.collect = function() {
    var dayBins, doy, hourBins, labels, mappings, monthBins, schemas, sod, time, val, weekBins, _ref,
      _this = this;
    this.modelData = [];
    _ref = this.get('data');
    for (time in _ref) {
      val = _ref[time];
      this.modelData.push({
        time: time,
        val: val
      });
    }
    if (this.modelData.length !== 0) {
      this.start = this.modelData[0];
      this.startTime = +this.start.time;
      this.start = this.start.val;
    } else {
      this.startTime = +new Date();
    }
    if (this.modelData.length > 1) {
      this.endTime = +new Date();
    }
    hourBins = d3.range(24);
    this.hoursReset = this.rangeReset('hours');
    dayBins = this.createBins('days');
    weekBins = this.createBins('weeks');
    monthBins = this.createBins('months');
    schemas = {
      today: {
        by: 'today',
        points: [],
        sum: 0
      },
      hours: {
        by: 'by hour',
        points: [],
        sum: 0
      },
      days: {
        by: 'by day',
        points: [],
        sum: 0
      },
      weeks: {
        by: 'by week',
        points: [],
        sum: 0
      },
      months: {
        by: 'by month',
        points: [],
        sum: 0
      }
    };
    doy = function(point) {
      if (point == null) {
        point = void 0;
      }
      return +moment(point).format("DDD");
    };
    sod = +moment().sod();
    mappings = {
      today: function(p) {
        time = +p.time;
        if (doy(time) !== doy()) {
          return '#!@*';
        }
        return sod;
      },
      hours: function(p) {
        return +_this.resetRange(p, _this.hoursReset);
      },
      days: function(p) {
        return +_this.resetRange(p, _this.daysReset);
      },
      weeks: function(p) {
        return +_this.resetRange(p, _this.weeksReset);
      },
      months: function(p) {
        return +_this.resetRange(p, _this.monthsReset);
      }
    };
    labels = {
      today: [+moment().sod()],
      hours: hourBins,
      days: dayBins,
      weeks: weekBins,
      months: monthBins
    };
    return this.latestData = this.migrate(mappings, schemas, labels);
  };

  Loop.prototype.collectTotals = function(data, schemappings) {
    var bin, index, mapping, prop, val, _i, _ref;
    for (index = _i = 0, _ref = data.length; 0 <= _ref ? _i < _ref : _i > _ref; index = 0 <= _ref ? ++_i : --_i) {
      bin = data[index];
      for (prop in schemappings) {
        mapping = schemappings[prop];
        val = mapping(bin, index, data);
        if (val != null) {
          bin[prop] = val;
        }
      }
    }
    return data;
  };

  return Loop;

})(Backbone.Model);

// Generated by CoffeeScript 1.3.3
var LoopView,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

LoopView = (function(_super) {

  __extends(LoopView, _super);

  function LoopView(options) {
    var modoptions;
    if (options == null) {
      options = {};
    }
    modoptions = _.extend({}, this.defaults, options);
    LoopView.__super__.constructor.call(this, modoptions);
    this.gather();
    this.attach();
  }

  LoopView.prototype.defaults = {
    loopTemplate: $('#loop-detail-template').html(),
    menuTemplate: $('#loop-menu-template').html()
  };

  LoopView.prototype.el = '#loop';

  LoopView.prototype.events = {};

  LoopView.prototype.gather = function() {
    this.templates = {
      loop: this.options.loopTemplate,
      menu: this.options.menuTemplate
    };
    this.element = this.$el;
    this.els = {
      "delete": $('#delete'),
      menu: $('#loop-menu'),
      buttons: $('#loop-buttons'),
      amountSpace: $('#amount-space')
    };
    return this.expandedConfig = {
      'day': ['today', 'hours', 'days'],
      'week': ['thisWeek', 'weeks'],
      'month': ['months']
    };
  };

  LoopView.prototype.attach = function() {
    var run, selector, thiz, _ref,
      _this = this;
    thiz = this;
    _.bindAll(this, 'edit', 'mod');
    this.clickEvent = window.mobile === true ? "tap" : "click";
    this.buttonEvents = {
      '#subtract': {
        method: "mod",
        args: ["amount", -1]
      },
      '#add': {
        method: "mod",
        args: ["amount", 1]
      }
    };
    _ref = this.buttonEvents;
    for (selector in _ref) {
      run = _ref[selector];
      this.els.buttons.on(this.clickEvent, selector, _.bind.apply(_, [this[run.method], this].concat(__slice.call(run.args))));
    }
    this.els.amountSpace.on(this.clickEvent, _.bind(this.edit, this));
    this.element.on(this.clickEvent, '.view', _.bind(this.viewChange, this));
    this.element.on(this.clickEvent, '.current', function(e) {
      var index, range;
      index = thiz.els.currents.indexOf(this);
      range = _.keys(thiz.expandedConfig)[index];
      thiz.model.set({
        range: range,
        period: thiz.expandedConfig[range][0]
      });
      return thiz.render();
    });
    this.els["delete"].on(this.clickEvent, _.bind(this.menu, this, 'delete', ''));
    return $(document).on(this.clickEvent, "body.menu", function(e) {
      var $body, el, id, operation, _base, _name;
      el = $(e.target);
      id = el.attr('id');
      $body = $(document.body);
      if (!$body.hasClass('viewing')) {
        $body.removeClass(_this.menuClass);
      } else if ($body.hasClass('mod')) {
        '';

      } else if (el.parent().attr('id') !== 'menu-buttons' && !el.hasClass('button')) {
        $body.removeClass(_this.menuClass);
      }
      if (el.is('.loop-item')) {
        return;
      }
      operation = $body.attr('class').match(/menu-(\w+)/)[1];
      return typeof (_base = _this.helpers[operation])[_name = "on" + id] === "function" ? _base[_name]() : void 0;
    });
  };

  LoopView.prototype.amountTemplate = function() {
    var amount;
    amount = this.model.get('amount');
    return "<input id='amount-template' type='tel' placeholder='" + amount + "' />";
  };

  LoopView.prototype.edit = function(prop) {
    var blurSave, input, template,
      _this = this;
    if ($('amount-template').length !== 0) {
      return;
    }
    template = this.amountTemplate();
    this.els.amount.html(template);
    input = this.els.amount.find('input');
    blurSave = function() {
      var amount, val;
      val = input.attr('value');
      amount = _this.model.get('amount');
      val = val === '' ? amount : +val;
      input.off('blur', blurSave);
      if (/^\d+$/.test(val) && val !== amount) {
        _this.model.set('amount', val);
        _this.els.amount.html(val);
      } else {
        _this.els.amount.html(amount);
      }
      return _this.mod('amount', 0);
    };
    input.on('blur', function() {
      return blurSave();
    });
    return input.focus();
  };

  LoopView.prototype.mod = function(prop, amount) {
    var val;
    val = (this.model.get(prop) || 0) + amount;
    if (val <= 0) {
      val = 0;
    }
    this.els[prop].html(val);
    this.model.set(prop, val);
    if (val <= 0) {
      return $(document.body).removeClass(this.menuClass || '');
    } else {
      return this.menu('save', 'mod');
    }
  };

  LoopView.prototype.menu = function(operation, menu) {
    var html;
    if (menu == null) {
      menu = '';
    }
    this.menuClass = "menu menu-" + operation + " " + menu;
    html = Mustache.render(this.templates.menu, this.helpers[operation]);
    this.els.menu.html(html);
    return $(document.body).addClass(this.menuClass);
  };

  LoopView.prototype["delete"] = function() {
    var $parent, els, properRemove;
    $parent = $("#" + (this.model.get('id')));
    properRemove = function(e) {
      var $this;
      $this = $(this);
      if ($this.is('li')) {
        $this.remove();
      } else {
        $this.html('');
      }
      return $this.off(e.type, properRemove);
    };
    els = $parent.add(this.element);
    els.on({
      'webkitTransitionEnd': properRemove,
      'transitionEnd': properRemove
    });
    loopsView.view({
      target: $parent
    });
    els.addClass('delete');
    return this.collection.remove(this.model.get('id'));
  };

  LoopView.prototype.save = function() {
    var data, point;
    point = {
      val: this.model.get('amount'),
      time: +new Date()
    };
    data = this.model.get('data');
    data[this.currentPoint || point.time] = point.val;
    this.model.set('data', data);
    this.collection.save();
    this.cancel();
    return this.render();
  };

  LoopView.prototype.cancel = function() {
    this.model.set('amount', 0);
    this.els.amount.html(0);
    $(document.body).removeClass(this.menuClass);
    return this.menuClass = '';
  };

  LoopView.prototype.viewChange = function(e) {
    var $el, view;
    $el = $(e.target);
    view = $el.data('range');
    this.element.find('.view.active').removeClass('active');
    $el.addClass('active');
    return this.trigger('viewChange', this.model.set('period', view));
  };

  LoopView.prototype.getModelData = function() {
    return this.latestModelData = this.model.collect();
  };

  LoopView.prototype.getCurrentData = function() {
    var current, data, interesting, todaysData;
    data = this.latestModelData || this.getModelData();
    interesting = [data.weeks, data.months];
    current = _.map(interesting, function(x) {
      return _.last(x);
    });
    todaysData = {
      sum: _.reduce(data.today, (function(a, b) {
        return a + b.sum;
      }), 0),
      headline: 'Today',
      by: 'today'
    };
    data.thisWeek = this.model.migrate({
      thisWeek: function(p) {
        return moment(+p.time).day();
      }
    }, {
      thisWeek: {
        by: 'This Week',
        points: [],
        sum: 0
      }
    }, {
      thisWeek: _.range(7)
    }, _.last(data.weeks).points).thisWeek;
    return _.flatten([todaysData, current]);
  };

  LoopView.prototype.render = function(template, model) {
    if (template == null) {
      template = this.templates.loop;
    }
    this.model = model != null ? model : this.model;
    if (!(this.helpers != null)) {
      this.helpers = this.defineHelpers();
    }
    if (this.model.get('amount') !== 0) {
      this.menu('save', 'mod');
    }
    this.latestTemplateData = _.extend({
      modelData: this.getModelData(),
      currentData: this.getCurrentData()
    }, this.helpers, this.model.attributes);
    this.element.html(Mustache.render(template, this.latestTemplateData));
    this.postRender();
    return this.trigger('render', this, {
      model: this.model
    });
  };

  LoopView.prototype.postRender = function() {
    return _.extend(this.els, {
      amount: this.element.find('#amount'),
      currents: this.element.find('.current')
    });
  };

  LoopView.prototype.restore = function(model, expandedDetail) {
    this.model = model;
    this.expandedDetail = expandedDetail;
    return this.trigger('restore', this.model);
  };

  LoopView.prototype.defineHelpers = function() {
    var thiz,
      _this = this;
    thiz = this;
    return {
      "delete": {
        oncancel: function() {
          return $(document.body).removeClass(_this.menuClass);
        },
        cancel: "Cancel",
        onsave: _.bind(this["delete"], this),
        save: "Delete"
      },
      save: {
        oncancel: _.bind(this.cancel, this),
        cancel: "Cancel",
        onsave: _.bind(this.save, this),
        save: "Save"
      },
      currents: function() {
        var collection, _i, _len, _ref;
        _ref = this.currentData;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          collection = _ref[_i];
          collection.headline || (collection.headline = (function() {
            switch (collection.by) {
              case 'by week':
                return 'This Week';
              case 'by month':
                return 'This Month';
            }
          })());
        }
        return this.currentData;
      },
      active: function() {
        var period, range, val;
        range = thiz.model.get('range');
        period = thiz.model.get('period');
        val = /[\w+\s\w+]$/.test('' + this) ? period === this.concat() : range === 'day' && this.by === 'today' ? true : range === this.by.split(' ')[1];
        if (val === true) {
          return 'active';
        } else {
          return '';
        }
      },
      amount: function() {
        return _this.model.attributes.amount || 0;
      },
      views: function() {
        var views;
        views = _this.expandedConfig[_this.model.get('range')];
        if (views.length === 1) {
          return [];
        } else {
          return views;
        }
      },
      rangeLabel: function() {
        return thiz.latestModelData['' + this][0].by;
      }
    };
  };

  return LoopView;

})(Backbone.View);

// Generated by CoffeeScript 1.3.3
var Graph;

Graph = (function() {

  function Graph(options) {
    var key, option;
    options = _.extend({}, this.defaults, options);
    for (key in options) {
      option = options[key];
      this[key] = option;
    }
    this.gather();
    this.addEvents();
  }

  Graph.prototype.gather = function() {
    this.graph = d3.select('#loop-graph');
    this.$graph = $(this.graph.node());
    this.graph.height = this.$graph.height() || 160;
    this.graph.width = this.$graph.width() || 320;
    return this.range = this.view.expandedDetail;
  };

  Graph.prototype.addEvents = function() {
    var _this = this;
    _.bindAll(this, 'render');
    this.view.on('render', function() {
      _this.range = _this.view.model.get('period');
      return _this.render();
    });
    return this.view.on('viewChange', function(view) {
      _this.range = _this.view.model.get('period');
      return _this.render();
    });
  };

  Graph.prototype.defaults = {};

  Graph.prototype.timeFormat = function(range) {
    if (range == null) {
      range = this.range;
    }
    switch (range) {
      case 'today':
        return 'h:mma';
      case 'hours':
        if (window.mobile === true) {
          return 'h';
        } else {
          return 'h:mma';
        }
        break;
      case 'days':
        return 'M/D';
      case 'weeks':
        return 'MMM Do';
      case 'thisWeek':
        if (window.mobile === true) {
          return 'ddd';
        } else {
          return 'dddd';
        }
        break;
      case 'months':
        return 'MMM';
    }
  };

  Graph.prototype.tickFormat = function(d, data) {
    switch (this.range) {
      case 'today':
        return moment(d);
      case 'hours':
        return moment().hours(d).minutes(0);
      case 'days':
        return moment(d);
      case 'weeks':
        return moment(d);
      case 'thisWeek':
        return moment().day(d);
      case 'months':
        return moment(d);
    }
  };

  Graph.prototype.findBins = function(range) {
    if (range == null) {
      range = this.range;
    }
    if (range === 'hours') {
      return d3.range(24);
    } else if (range === 'thisWeek') {
      return d3.range(7);
    } else {
      return this.view.model.createBins(range);
    }
  };

  Graph.prototype.setScales = function(data) {
    var addMinutes, area, height, line, marginY, negY, sums, times, width, x, y, yMax, yMin, _ref;
    times = [];
    sums = [];
    this.margin = window.mobile === true ? 20 : 50;
    width = this.graph.width - this.margin;
    height = this.graph.height - this.margin;
    _.each(data, function(x) {
      times.push(+(x.time || x.label));
      return sums.push(x.val || x.sum);
    });
    if (sums.length === 0) {
      sums = [0, 0];
    }
    if (this.range === 'today') {
      addMinutes = function() {
        var i, _i, _results;
        _results = [];
        for (i = _i = 1; _i <= 4; i = ++_i) {
          _results.push(times.unshift(+moment().subtract('minutes', i)));
        }
        return _results;
      };
      if (data.length) {
        if (moment(+_.last(data).time).diff(+data[0].time, 'minutes') <= 2) {
          addMinutes();
        }
      } else {
        addMinutes();
      }
      times.unshift(+moment());
    }
    x = d3.scale.linear().domain(d3.extent(times)).range([this.margin, width]);
    y = d3.scale.linear().domain(d3.extent(sums));
    _ref = y.domain(), yMin = _ref[0], yMax = _ref[1];
    if (yMin === yMax) {
      y.domain([0, yMax]);
    }
    negY = y.copy().range([this.margin, height]);
    marginY = y.copy().range([height - this.margin, this.margin / 2]);
    line = d3.svg.line().x(function(p) {
      return x(+(p.time || p.label));
    }).y(function(p) {
      return marginY(p.val || p.sum);
    });
    area = d3.svg.area().x(function(p) {
      return x(+(p.time || p.label));
    }).y0(height).y(function(p) {
      return y(p.val || p.sum);
    });
    return {
      x: x,
      y: y,
      marginY: marginY,
      negY: negY,
      line: line,
      area: area
    };
  };

  Graph.prototype.drawXTicks = function(scales, data) {
    var mod, ticks, timeFormat, translate, x, xAxis, xTicks,
      _this = this;
    xAxis = this.graph.append('g').attr('class', 'ticks xTicks').attr('transform', "translate(0, " + (this.graph.height - 5) + ")");
    if (this.range === 'today') {
      ticks = window.mobile === true ? scales.x.ticks(5) : scales.x.ticks(14);
      x = scales.x;
      translate = function(d) {
        return "translate(" + (x(d)) + ", 0)";
      };
    } else {
      ticks = this.findBins();
      x = d3.scale.ordinal().domain(d3.range(data.length)).rangeBands([0, this.graph.width], 0.001);
      translate = function(d) {
        return "translate(" + (x(d) + x.rangeBand() / 2) + ", 0)";
      };
    }
    xTicks = xAxis.selectAll('g').data(ticks).enter().append('g').attr('class', 'tick').attr('transform', function(d) {
      return translate(d);
    });
    timeFormat = this.timeFormat();
    mod = (function() {
      switch (this.range) {
        case 'hours':
          return 2;
        case 'days':
          return Math.floor(data.length / 10) || 1;
        default:
          return 1;
      }
    }).call(this);
    xTicks.filter(function(d, i) {
      return i % mod === 0;
    }).append('svg:text').text(function(d, i) {
      var time;
      time = _this.tickFormat(d);
      if (time === false) {
        return '';
      }
      if (_this.range === 'hours' && window.mobile === true) {
        timeFormat = moment(time).hours() < 12 ? 'h[a]' : 'h[p]';
      }
      return time.format(timeFormat);
    });
    if (this.range === 'today') {
      xTicks.append('svg:line').attr('class', 'ruler').attr('y1', '-15').attr('y2', '-275');
    }
    return xTicks;
  };

  Graph.prototype.drawTimeSeries = function(scales, data) {
    var draw, k, ticks, yAxis, yTicks,
      _this = this;
    yAxis = this.graph.append('g').attr('class', 'ticks yTicks');
    if (window.mobile === true) {
      ticks = scales.y.ticks(8);
      scales.x.range([this.margin + 10, this.graph.width - this.margin]);
    } else {
      ticks = scales.y.ticks(10);
    }
    yTicks = yAxis.selectAll('g').data(ticks).enter().append('g').attr('class', 'tick').attr('transform', function(d) {
      return "translate(10, " + (scales.marginY(d)) + ")";
    });
    yTicks.append('svg:text').attr('dy', 5).text(d3.format('d'));
    yTicks.append('svg:line').attr('class', 'ruler').attr('x1', 10).attr('x2', this.graph.width - 20).attr('transform', 'translate(0, 2)');
    this.line = this.graph.selectAll('path').data([data]).enter().append('svg:path');
    this.nodes = this.graph.selectAll('.point').data(data).enter().append('svg:circle').attr('class', 'point');
    draw = function(k) {
      var node;
      _this.line.attr('d', function(d) {
        return scales.line(d.slice(0, k));
      });
      node = d3.select(_this.nodes[0][k]);
      node.attr('cx', function(d) {
        return scales.x(+(d.time || d.label));
      }).attr('cy', function(d) {
        return scales.marginY(d.val || d.sum);
      }).attr('r', 5).transition().duration(500).attrTween('r', function(d) {
        return function(t) {
          return d3.interpolate(10, 5)(t);
        };
      });
      return false;
    };
    k = 0;
    return d3.timer(function() {
      if (k === data.length + 1) {
        return true;
      } else {
        return draw(k++);
      }
    });
  };

  Graph.prototype.drawHistogram = function(scales, data) {
    var bar, height, histogram, thiz, tickOffset, x, y;
    thiz = this;
    height = this.graph.height - (this.margin / 2);
    if (window.mobile === true) {
      height -= 10;
    }
    y = scales.y.copy().domain([0, scales.y.domain()[1]]).range([10, height]);
    x = d3.scale.ordinal().domain(d3.range(data.length)).rangeBands([0, this.graph.width], 0.004);
    histogram = this.graph.append('g').attr('class', 'histogram').attr('transform', "translate(0," + height + ") scale(1,-1)");
    bar = histogram.selectAll('.bar').data(data).enter().append('svg:g').attr('class', 'bar').attr('transform', function(d, i) {
      return "translate(" + (x(i)) + ", 0)";
    });
    bar.append('svg:rect').attr('width', x.rangeBand()).attr('height', 0).each(function(d, i) {
      return d3.select(this).transition().delay((600 / data.length) * i).duration(175).attr('height', function(d) {
        return y(d.val || d.sum);
      });
    });
    tickOffset = window.mobile === true ? 15 : 20;
    return bar.append('svg:text').attr('class', 'tick').attr('x', x.rangeBand() / 2).attr('y', 0).attr('transform', 'scale(1, -1)').each(function(d, i) {
      if (d.val === 0 || d.sum === 0) {
        return;
      }
      return d3.select(this).transition().delay((600 / data.length) * i).duration(175).text(d.val || d.sum).attr('y', function(d) {
        height = d.val || d.sum;
        return -1 * y(height) + tickOffset;
      });
    });
  };

  Graph.prototype.render = function() {
    var data;
    data = this.view.latestModelData;
    if (!(data != null)) {
      return;
    }
    data = this.range === 'today' ? data.today[0].points : this.range === 'thisWeek' ? data.thisWeek : data[this.range];
    this.graph.selectAll('*').remove();
    this.scales = this.setScales(data);
    this.xTicks = this.drawXTicks(this.scales, data);
    if (this.range === 'today') {
      return this.drawTimeSeries(this.scales, data);
    } else {
      return this.drawHistogram(this.scales, data);
    }
  };

  return Graph;

})();

// Generated by CoffeeScript 1.3.3
var LoopsView,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

LoopsView = (function(_super) {

  __extends(LoopsView, _super);

  function LoopsView(options) {
    var attrs, _ref;
    if (options == null) {
      options = {};
    }
    attrs = _.extend({}, this.defaults, options);
    if (!(attrs.collection != null)) {
      throw new Error('No collection given');
    }
    this.preProcess();
    LoopsView.__super__.constructor.call(this, attrs);
    _ref = this.options, this.collection = _ref.collection, this.subView = _ref.subView;
    this.gather();
    this.attach();
    this.helpers = this.defineHelpers();
  }

  LoopsView.prototype.preProcess = function() {
    var addClicks,
      _this = this;
    return addClicks = (function() {
      var method, selector, _ref;
      _this.clickEvent = window.mobile === true ? "tap" : "click";
      _this.clickEvents = {
        '.loop-item': 'view',
        'label': 'edit'
      };
      _ref = _this.clickEvents;
      for (selector in _ref) {
        method = _ref[selector];
        _this.events["" + _this.clickEvent + " " + selector] = method;
      }
      return _this.events['keydown .new-loop'] = function(e) {
        if (e.keyCode === 13) {
          e.preventDefault();
          return $(e.target).blur();
        } else if (e.keyCode === 27) {
          e.preventDefault();
          return $(e.target).attr('value', '').blur();
        }
      };
    })();
  };

  LoopsView.prototype.gather = function() {
    this.element = this.$el;
    this.els = {
      "new": $('#create'),
      portability: $('#data-buttons'),
      additional: $('#additional'),
      container: $('.container')
    };
    return this.templates = {
      loops: $("#" + this.options.templateId).html(),
      "new": $("#" + this.options.newLoopTemplateId).html()
    };
  };

  LoopsView.prototype.attach = function() {
    var _this = this;
    _.bindAll(this, 'edit', 'view', 'delete');
    this.element.on('blur', 'input.new', function(e) {
      return _this.save.call(_this, e.target);
    });
    this.els["new"].on(this.clickEvent, function() {
      var newLoop;
      newLoop = _this.$('.new-loop input');
      if (newLoop.length > 0) {
        newLoop.blur();
      }
      return _this.collection.add([new Loop({})]);
    });
    this.collection.on('add', function(model) {
      return _this["new"](model);
    });
    this.collection.on('reset', function() {
      return _this.render();
    });
    this.collection.on('remove', function(model) {
      return _this["delete"](model);
    });
    return this.subView.on('restore', _.bind(this.restore, this));
  };

  LoopsView.prototype.el = '#loops';

  LoopsView.prototype.events = {};

  LoopsView.prototype.defaults = {
    templateId: 'loop-template',
    newLoopTemplateId: 'loop-new-template'
  };

  LoopsView.prototype["new"] = function(model, replace) {
    var data, html;
    data = _.extend({}, this.helpers, model.toJSON());
    html = Mustache.render(this.templates["new"], data);
    if (replace) {
      replace.outerHTML = html;
    } else {
      this.element.prepend(html);
    }
    return this.$('.new').focus();
  };

  LoopsView.prototype.save = function(el, model) {
    var $parent, value;
    $parent = $(el).parent();
    if (!(model != null)) {
      model = this.collection.get($parent.attr('id'));
    }
    if (el.value === '' && model.get('label') === void 0) {
      return this.collection.remove(model);
    } else if (el.value === '') {
      value = model.get('label');
    } else {
      value = el.value;
    }
    model.set('label', value);
    this.collection.sync('update', model.attributes);
    return this.render();
  };

  LoopsView.prototype.view = function(e) {
    var $newLoop, el, newLoop,
      _this = this;
    el = $(e.target);
    if (!el.is('li')) {
      return;
    }
    $newLoop = this.element.find('.new-loop');
    if ($newLoop[0] != null) {
      newLoop = this.collection.get($newLoop.attr('id'));
      this.save($newLoop.find('input')[0], newLoop);
      el = $("#" + e.target.id);
      e.target = el[0];
    }
    if (scrollY !== 0) {
      if (window.mobile === true) {
        window.scrollTo(0, 0);
      } else {
        $.scroll(0);
      }
    }
    if (this.slideList(e.target) === true) {
      this.subView.render(null, this.collection.get(e.target.id));
      return setTimeout(function() {
        return $(document.body).attr('class', 'show viewing ' + _this.subView.menuClass);
      }, 1);
    } else {
      this.subView.menuClass = '';
      $(document.body).attr('class', 'show');
      return this.trigger('render', this);
    }
  };

  LoopsView.prototype.slideList = function(element) {
    var $el, $prev, elOffset, next, offset, padding, prev, top, transform;
    $el = $(element);
    prev = element.previousElementSibling;
    next = element.nextElementSibling;
    transform = browser.flag + "transform";
    offset = this.element.offset().top;
    elOffset = $el.offset().top - offset;
    if ($el.hasClass('active')) {
      this.element.css(transform, 'translate3d(0,0,0)').css('height', '');
      $el.removeClass('active').css(transform, 'translate3d(0,-' + elOffset + 'px,0)');
      $el.siblings().css(transform, 'translate3d(0,0,0)');
      this.els.additional.removeClass('slide');
      return false;
    } else {
      padding = window.mobile === true ? 0 : 30;
      this.element.css(transform, 'translate3d(0,-' + offset + 'px,0)').css('height', window.ogHeight - offset - padding);
      $el.addClass('active').css(transform, 'translate3d(0,-' + elOffset + 'px,0)');
      while (prev != null) {
        $prev = $(prev);
        top = $prev.offset().top + $prev.height();
        $prev.css(transform, 'translate3d(0,-' + top + 'px,0)');
        prev = prev.previousElementSibling;
      }
      while (next != null) {
        $(next).addClass('next').css(transform, "translate3d(0," + window.ogHeight + "px,0)");
        next = next.nextElementSibling;
      }
      this.els.additional.addClass('slide');
      return true;
    }
  };

  LoopsView.prototype.edit = function(e) {
    var el, model;
    el = $(e.target).parent();
    if (el.hasClass('active')) {
      return this.view({
        target: el[0]
      });
    }
    model = this.collection.get(el.attr('id'));
    return this["new"](model, el[0]);
  };

  LoopsView.prototype["delete"] = function(model) {
    var id;
    id = model.get('id');
    return $("#" + id).remove();
  };

  LoopsView.prototype.render = function(template, data) {
    var html, templateData;
    if (template == null) {
      template = this.templates.loops;
    }
    data = data || _.sortBy(this.collection.toJSON(), function(i) {
      return -1 * this.get(i.id).cid.slice(1);
    }, this.collection);
    templateData = _.extend({}, this.helpers, {
      loops: data
    });
    this.latestTemplateData = templateData;
    html = Mustache.render(template, templateData);
    this.element.html(html);
    this.postRender();
    return this;
  };

  LoopsView.prototype.postRender = function() {
    var height;
    this.els.loops = this.element.find('.loop-item');
    if (this.collection.models.length > 0) {
      this.els.portability.addClass('show');
    } else {
      this.els.portability.removeClass('show');
    }
    height = this.els.loops.length * this.els.loops.height();
    if (window.mobile === true && height >= 370) {
      return this.els.container.css({
        height: height + 130,
        'max-height': height + 130
      });
    }
  };

  LoopsView.prototype.restore = function(model) {
    this.render();
    if (model) {
      return this.view({
        target: $("#" + model.id)[0]
      });
    }
  };

  LoopsView.prototype.defineHelpers = function() {
    var thiz;
    thiz = this;
    return {
      placeholder: function() {
        return this.label || 'Loop Name';
      }
    };
  };

  return LoopsView;

})(Backbone.View);

// Generated by CoffeeScript 1.3.3
var Session,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

Session = (function(_super) {

  __extends(Session, _super);

  function Session() {
    var event, i, run, view, viewNames, _i, _j, _len, _len1, _ref, _ref1, _ref2;
    viewNames = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    this.viewNames = viewNames;
    Session.__super__.constructor.call(this, this.localStorage.data);
    _ref = this.viewNames;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      view = _ref[_i];
      _ref1 = this.viewEvents;
      for (event in _ref1) {
        run = _ref1[event];
        window[view].on(event, run, this);
      }
    }
    this.view = window[this.get('view')];
    if (!(this.view != null)) {
      view = this.viewNames[0];
      this.sync.apply(this, [
        'create', view, {
          id: 'view'
        }
      ]);
      this.set('view', this.view = window[view]);
    }
    this.views = [];
    _ref2 = this.viewNames;
    for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
      i = _ref2[_j];
      this.views.push(window[i]);
    }
    this.model = this.get('model');
    if (this.model) {
      this.view.restore(this.view.collection.get(this.model.id), this.get('graph'));
    } else {
      this.view.restore();
    }
  }

  Session.prototype.viewEvents = {
    'render': function(view, data) {
      var sync, viewName,
        _this = this;
      this.view = view;
      viewName = this.viewNames[this.views.indexOf(this.view)];
      this.sync.apply(this, [
        'update', viewName, {
          id: 'view'
        }
      ]);
      sync = function(op, data) {
        var datum, key, _results;
        _results = [];
        for (key in data) {
          datum = data[key];
          _results.push(_this.sync.apply(_this, [
            op, datum, {
              id: key
            }
          ]));
        }
        return _results;
      };
      if (data != null) {
        return sync('update', data);
      } else {
        return sync('delete', this.localStorage.data);
      }
    }
  };

  Session.prototype.newSong = function() {
    var max, ogSong, song;
    max = music.length - 1;
    ogSong = this.get('song') || Math.getRandomInt(0, max);
    song = ogSong;
    while (song === ogSong) {
      song = Math.getRandomInt(0, max);
    }
    return this.saveSong(song);
  };

  Session.prototype.saveSong = function(song) {
    this.set('song', song);
    this.sync.apply(this, [
      'update', song, {
        id: 'song'
      }
    ]);
    return song;
  };

  Session.prototype.localStorage = new Store('loops-session');

  Session.prototype.sync = Backbone.sync.store;

  return Session;

})(Backbone.Model);

// Generated by CoffeeScript 1.3.3
var music;

music = ['http://rd.io/x/QH6PK0JQ85k', 'http://rd.io/x/QH6PK0JOb-w', 'http://rd.io/x/QH6PK0JOb5M', 'http://rd.io/x/QH6PK0JOb5s', 'http://rd.io/x/QH6PK0JTWm4', 'http://rd.io/x/QH6PK0JQDLg', 'http://rd.io/x/QH6PK0JQDVk', 'http://rd.io/x/QX-A6jdeXDK_', 'http://rd.io/x/QX-A6jdeXDVX', 'http://rd.io/x/QX-A6jd4MeY', 'http://rd.io/x/QX-A6jd0i8s', 'http://rd.io/x/QX-A6jfhnaM', 'http://rd.io/x/QX-A6jfhgn4', 'http://rd.io/x/QH6PKzlhDQ', 'http://cloudkicker.bandcamp.com/track/its-inside-me-and-im-inside-it', 'http://cloudkicker.bandcamp.com/track/let-yourself-be-huge', 'http://cloudkicker.bandcamp.com/track/oh-god', 'http://cloudkicker.bandcamp.com/track/push-it-way-up'];

// Generated by CoffeeScript 1.3.3
var Browser;

(function(moment) {
  return moment.fn.week = function(week) {
    return +this.format("w");
  };
})(moment);

moment;


(function(_) {
  return _.mixin({
    copy: function(properties) {
      var key, obj, value;
      obj = {};
      for (key in properties) {
        value = properties[key];
        obj[key] = Array.isArray(value) ? value.slice() : value;
      }
      return obj;
    }
  });
})(_);

_;


Math.getRandomInt = function(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
};

Browser = (function() {

  function Browser() {
    this.lUA = navigator.userAgent.toLowerCase();
    this.platform = navigator.platform.toLowerCase();
    this.UA = this.lUA.match(/(opera|ie|firefox|chrome|version)[\s\/:]([\w\d\.]+)?.*?(safari|version[\s\/:]([\w\d\.]+)|$)/) || [null, 'unknown', 0];
    this.mode = this.UA[1] === 'ie' && document.documentMode;
    this.name = this.UA[1] === 'version' ? this.UA[3] : this.UA[1];
    this.version = this.mode || parseFloat(this.UA[1] === 'opera' && this.UA[4] ? this.UA[4] : this.UA[2]);
    this.Platform = {
      name: this.lUA.match(/ip(?:ad|od|hone)/) ? 'ios' : (this.lUA.match(/(?:webos|android)/) || this.platform.match(/mac|win|linux/) || ['other'])[0]
    };
    this.Features = {
      xpath: !!document.evaluate,
      air: !!window.runtime,
      query: !!document.querySelector,
      json: !!window.JSON
    };
    this.flag = (function() {
      if (this.name === 'unknown') {
        switch (this.Platform.name) {
          case 'ios':
            return '-webkit-';
          case 'android':
            return '-webkit-';
          case 'webos':
            return '-webkit-';
        }
      } else {
        switch (this.name) {
          case 'chrome':
            return '-webkit-';
          case 'safari':
            return '-webkit-';
          case 'firefox':
            return '-moz-';
          case 'ie':
            return '-ms-';
          case 'opera':
            return '-o-';
          default:
            return '';
        }
      }
    }).call(this);
  }

  return Browser;

})();

$(function() {
  window.browser = new Browser();
  window.ogHeight = window.innerHeight;
  window.platform = browser.Platform.name;
  window.mobile = platform === 'ios' || platform === 'android' ? true : false;
  window.loops = new Loops();
  window.loopView = new LoopView({
    collection: loops
  });
  window.graph = new Graph({
    view: loopView
  });
  window.loopsView = new LoopsView({
    collection: loops,
    subView: loopView
  });
  window.session = new Session('loopsView', 'loopView');
  if (window.navigator.standalone === false) {
    $(document.body).addClass('to-install');
  }
  return $(document.body).addClass('show');
});
