// Generated by CoffeeScript 1.3.3
var Loop, LoopView, Loops,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Loops = (function(_super) {

  __extends(Loops, _super);

  function Loops(models, options) {
    var data, event, run, _ref;
    if (models == null) {
      models = [];
    }
    if (options == null) {
      options = {};
    }
    this.model = Loop;
    data = _.union(models, _.toArray(this.localStorage.data));
    Loops.__super__.constructor.call(this, data, options);
    this.localStorage.save();
    _ref = this.events;
    for (event in _ref) {
      run = _ref[event];
      this.on(event, run);
    }
  }

  Loops.prototype.parse = 'loops';

  Loops.prototype.localStorage = new Store('loops');

  Loops.prototype.events = {
    'add': function(model) {
      return this.sync('create', model);
    },
    'remove': function(model) {
      return this.sync('delete', model);
    },
    'reset': function(model) {
      localStorage.removeItem('loops');
      return this.localStorage = new Store('loops');
    }
  };

  Loops.prototype.sync = Backbone.sync.store;

  return Loops;

})(Backbone.Collection);

Loop = (function(_super) {

  __extends(Loop, _super);

  function Loop(attributes, options) {
    attributes.id || (attributes.id = S4());
    Loop.__super__.constructor.call(this, attributes, options);
  }

  return Loop;

})(Backbone.Model);

LoopView = (function(_super) {

  __extends(LoopView, _super);

  function LoopView(collection, options) {
    if (options == null) {
      options = {};
    }
    _.extend(options, this.defaults);
    LoopView.__super__.constructor.call(this, options);
    this.collection = collection;
    this.template = Hogan.compile($("#" + options.templateId).html());
    this.gather();
    this.attach();
    return this;
  }

  LoopView.prototype.gather = function() {
    return this.els = {
      "new": $('#create'),
      newTemplate: $('#loop-new-template')
    };
  };

  LoopView.prototype.attach = function() {
    var _this = this;
    _.bindAll(this, 'edit');
    this.collection.on('add', function(model) {
      return _this["new"](model);
    });
    this.$el.on('blur', 'input.new', function(e) {
      return _this.save.call(_this, e.target);
    });
    this.els["new"].on('click', function() {
      return _this.collection.add([new Loop({})]);
    });
    this.collection.on('update', function() {
      return _this.render();
    });
    return this.collection.on('reset', function() {
      return _this.render();
    });
  };

  LoopView.prototype.el = '#loops';

  LoopView.prototype.events = {
    'click label': 'edit',
    'keydown input.new': 'create'
  };

  LoopView.prototype.defaults = {
    templateId: 'loop-template'
  };

  LoopView.prototype["new"] = function(model) {
    var template;
    template = Hogan.compile(this.els.newTemplate.html());
    this.$el.prepend(template.render(model.toJSON()));
    return this.$('input.new').focus();
  };

  LoopView.prototype.create = function(e) {
    return console.log(e);
  };

  LoopView.prototype.save = function(el, model) {
    if (model == null) {
      model = _.last(this.collection.models);
    }
    model.set('label', el.value);
    this.collection.sync('update', model);
    return this.collection.trigger('update');
  };

  LoopView.prototype.edit = function(e) {
    var el, model;
    el = $(e.target).parent();
    model = this.collection.get(el.attr('id'));
    el.remove();
    return this["new"](model);
  };

  LoopView.prototype.render = function(template, data) {
    var html;
    if (template == null) {
      template = this.template;
    }
    data = data || _.sortBy(this.collection.toJSON(), function(i) {
      return -1 * this.get(i.id).cid.slice(1);
    }, this.collection);
    html = template.render({
      loops: data
    });
    this.$el.html(html);
    return this;
  };

  return LoopView;

})(Backbone.View);
