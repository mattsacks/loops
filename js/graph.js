// Generated by CoffeeScript 1.3.3
var Graph;

Graph = (function() {

  function Graph(options) {
    var key, option;
    options = _.extend({}, this.defaults, options);
    for (key in options) {
      option = options[key];
      this[key] = option;
    }
    this.gather();
    this.addEvents();
  }

  Graph.prototype.gather = function() {
    this.graph = d3.select('#loop-graph');
    this.$graph = $(this.graph.node());
    this.graph.height = this.$graph.height() || 160;
    this.graph.width = this.$graph.width() || 320;
    return this.range = this.view.expandedDetail;
  };

  Graph.prototype.addEvents = function() {
    var _this = this;
    _.bindAll(this, 'render');
    this.view.on('render', function() {
      _this.range = _this.view.model.get('period');
      return _this.render();
    });
    return this.view.on('viewChange', function(view) {
      _this.range = _this.view.model.get('period');
      return _this.render();
    });
  };

  Graph.prototype.defaults = {};

  Graph.prototype.timeFormat = function(range) {
    if (range == null) {
      range = this.range;
    }
    switch (range) {
      case 'today':
        return 'h:mma';
      case 'hours':
        if (window.mobile === true) {
          return 'h';
        } else {
          return 'h:mma';
        }
        break;
      case 'days':
        return 'M/D';
      case 'weeks':
        return 'MMM Do';
      case 'thisWeek':
        if (window.mobile === true) {
          return 'ddd';
        } else {
          return 'dddd';
        }
        break;
      case 'months':
        return 'MMM';
    }
  };

  Graph.prototype.tickFormat = function(d, data) {
    switch (this.range) {
      case 'today':
        return moment(d);
      case 'hours':
        return moment().hours(d).minutes(0);
      case 'days':
        return moment(d);
      case 'weeks':
        return moment(d);
      case 'thisWeek':
        return moment().day(d);
      case 'months':
        return moment(d);
    }
  };

  Graph.prototype.findBins = function(range) {
    if (range == null) {
      range = this.range;
    }
    if (range === 'hours') {
      return d3.range(24);
    } else if (range === 'thisWeek') {
      return d3.range(7);
    } else {
      return this.view.model.createBins(range);
    }
  };

  Graph.prototype.setScales = function(data) {
    var addMinutes, area, height, line, marginY, negY, sums, times, width, x, y, yMax, yMin, _ref;
    times = [];
    sums = [];
    this.margin = window.mobile === true ? 20 : 50;
    width = this.graph.width - this.margin;
    height = this.graph.height - this.margin;
    _.each(data, function(x) {
      times.push(+(x.time || x.label));
      return sums.push(x.val || x.sum);
    });
    if (sums.length === 0) {
      sums = [0, 0];
    }
    if (this.range === 'today') {
      addMinutes = function() {
        var i, _i, _results;
        _results = [];
        for (i = _i = 1; _i <= 4; i = ++_i) {
          _results.push(times.unshift(+moment().subtract('minutes', i)));
        }
        return _results;
      };
      if (data.length) {
        if (moment(+_.last(data).time).diff(+data[0].time, 'minutes') <= 2) {
          addMinutes();
        }
      } else {
        addMinutes();
      }
      times.unshift(+moment());
    }
    x = d3.scale.linear().domain(d3.extent(times)).range([this.margin, width]);
    y = d3.scale.linear().domain(d3.extent(sums));
    _ref = y.domain(), yMin = _ref[0], yMax = _ref[1];
    if (yMin === yMax) {
      y.domain([0, yMax]);
    }
    negY = y.copy().range([this.margin, height]);
    marginY = y.copy().range([height - this.margin, this.margin / 2]);
    line = d3.svg.line().x(function(p) {
      return x(+(p.time || p.label));
    }).y(function(p) {
      return marginY(p.val || p.sum);
    });
    area = d3.svg.area().x(function(p) {
      return x(+(p.time || p.label));
    }).y0(height).y(function(p) {
      return y(p.val || p.sum);
    });
    return {
      x: x,
      y: y,
      marginY: marginY,
      negY: negY,
      line: line,
      area: area
    };
  };

  Graph.prototype.drawXTicks = function(scales, data) {
    var mod, ticks, timeFormat, translate, x, xAxis, xTicks,
      _this = this;
    xAxis = this.graph.append('g').attr('class', 'ticks xTicks').attr('transform', "translate(0, " + (this.graph.height - 5) + ")");
    if (this.range === 'today') {
      ticks = window.mobile === true ? scales.x.ticks(5) : scales.x.ticks(14);
      x = scales.x;
      translate = function(d) {
        return "translate(" + (x(d)) + ", 0)";
      };
    } else {
      ticks = this.findBins();
      x = d3.scale.ordinal().domain(d3.range(data.length)).rangeBands([0, this.graph.width], 0.001);
      translate = function(d) {
        return "translate(" + (x(d) + x.rangeBand() / 2) + ", 0)";
      };
    }
    xTicks = xAxis.selectAll('g').data(ticks).enter().append('g').attr('class', 'tick').attr('transform', function(d) {
      return translate(d);
    });
    timeFormat = this.timeFormat();
    mod = (function() {
      switch (this.range) {
        case 'hours':
          return 2;
        case 'days':
          return Math.floor(data.length / 10) || 1;
        default:
          return 1;
      }
    }).call(this);
    xTicks.filter(function(d, i) {
      return i % mod === 0;
    }).append('svg:text').text(function(d, i) {
      var time;
      time = _this.tickFormat(d);
      if (time === false) {
        return '';
      }
      if (_this.range === 'hours' && window.mobile === true) {
        timeFormat = moment(time).hours() < 12 ? 'h[a]' : 'h[p]';
      }
      return time.format(timeFormat);
    });
    if (this.range === 'today') {
      xTicks.append('svg:line').attr('class', 'ruler').attr('y1', '-15').attr('y2', '-275');
    }
    return xTicks;
  };

  Graph.prototype.drawTimeSeries = function(scales, data) {
    var draw, k, ticks, yAxis, yTicks,
      _this = this;
    yAxis = this.graph.append('g').attr('class', 'ticks yTicks');
    if (window.mobile === true) {
      ticks = scales.y.ticks(10);
      scales.x.range([this.margin + 10, this.graph.width - this.margin]);
    } else {
      ticks = scales.y.ticks(5);
    }
    yTicks = yAxis.selectAll('g').data(ticks).enter().append('g').attr('class', 'tick').attr('transform', function(d) {
      return "translate(10, " + (scales.marginY(d)) + ")";
    });
    yTicks.append('svg:text').attr('dy', 5).text(d3.format('d'));
    yTicks.append('svg:line').attr('class', 'ruler').attr('x1', 10).attr('x2', this.graph.width - 20).attr('transform', 'translate(0, 2)');
    this.line = this.graph.selectAll('path').data([data]).enter().append('svg:path');
    this.nodes = this.graph.selectAll('.point').data(data).enter().append('svg:circle').attr('class', 'point');
    draw = function(k) {
      var node;
      _this.line.attr('d', function(d) {
        return scales.line(d.slice(0, k));
      });
      node = d3.select(_this.nodes[0][k]);
      node.attr('cx', function(d) {
        return scales.x(+(d.time || d.label));
      }).attr('cy', function(d) {
        return scales.marginY(d.val || d.sum);
      }).attr('r', 5).transition().duration(400).attrTween('r', function(d) {
        return function(t) {
          return d3.interpolate(10, 5)(t);
        };
      });
      return false;
    };
    k = 0;
    return d3.timer(function() {
      if (k === data.length + 1) {
        return true;
      } else {
        return draw(k++);
      }
    });
  };

  Graph.prototype.drawHistogram = function(scales, data) {
    var bar, height, histogram, thiz, tickOffset, x, y;
    thiz = this;
    height = this.graph.height - (this.margin / 2);
    if (window.mobile === true) {
      height -= 10;
    }
    y = scales.y.copy().domain([0, scales.y.domain()[1]]).range([10, height]);
    x = d3.scale.ordinal().domain(d3.range(data.length)).rangeBands([0, this.graph.width], 0.004);
    histogram = this.graph.append('g').attr('class', 'histogram').attr('transform', "translate(0," + height + ") scale(1,-1)");
    bar = histogram.selectAll('.bar').data(data).enter().append('svg:g').attr('class', 'bar').attr('transform', function(d, i) {
      return "translate(" + (x(i)) + ", 0)";
    });
    bar.append('svg:rect').attr('width', x.rangeBand()).attr('height', 0).each(function(d, i) {
      return d3.select(this).transition().delay((600 / data.length) * i).duration(175).attr('height', function(d) {
        return y(d.val || d.sum);
      });
    });
    tickOffset = window.mobile === true ? 15 : 20;
    return bar.append('svg:text').attr('class', 'tick').attr('x', x.rangeBand() / 2).attr('y', 0).attr('transform', 'scale(1, -1)').each(function(d, i) {
      if (d.val === 0 || d.sum === 0) {
        return;
      }
      return d3.select(this).transition().delay((600 / data.length) * i).duration(175).text(d.val || d.sum).attr('y', function(d) {
        height = d.val || d.sum;
        return -1 * y(height) + tickOffset;
      });
    });
  };

  Graph.prototype.render = function() {
    var data;
    data = this.view.latestModelData;
    if (!(data != null)) {
      return;
    }
    data = this.range === 'today' ? data.today[0].points : this.range === 'thisWeek' ? data.thisWeek : data[this.range];
    this.graph.selectAll('*').remove();
    this.scales = this.setScales(data);
    this.xTicks = this.drawXTicks(this.scales, data);
    if (this.range === 'today') {
      return this.drawTimeSeries(this.scales, data);
    } else {
      return this.drawHistogram(this.scales, data);
    }
  };

  return Graph;

})();
