// Generated by CoffeeScript 1.3.3
var TimeSeries;

TimeSeries = (function() {

  function TimeSeries(options) {
    var key, option;
    options = _.extend({}, this.defaults, options);
    for (key in options) {
      option = options[key];
      this[key] = option;
    }
    this.gather();
    this.addEvents();
  }

  TimeSeries.prototype.gather = function() {
    this.graph = d3.select('#loop-graph');
    this.$graph = $(this.graph.node());
    this.graph.height = this.$graph.height() || 160;
    this.graph.width = this.$graph.width() || 320;
    return this.range = this.view.expandedDetail;
  };

  TimeSeries.prototype.addEvents = function() {
    var _this = this;
    _.bindAll(this, 'render');
    this.view.on('render', function() {
      _this.range = _this.view.model.get('period');
      return _this.render();
    });
    return this.view.on('viewChange', function(view) {
      _this.range = _this.view.model.get('period');
      return _this.render();
    });
  };

  TimeSeries.prototype.defaults = {};

  TimeSeries.prototype.timeFormat = function(range) {
    if (range == null) {
      range = this.range;
    }
    switch (range) {
      case 'today':
        return 'h:mma';
      case 'hour':
        return 'h:mma';
      case 'day':
        return 'M/D';
      case 'week':
        return 'MMM Do';
      case 'thisWeek':
        return 'dddd';
      case 'month':
        return 'MMM';
    }
  };

  TimeSeries.prototype.tickFormat = function(d, range) {
    if (range == null) {
      range = this.range;
    }
    switch (range) {
      case 'today':
        return moment(d);
      case 'hour':
        return moment().hours(d).minutes(0);
      case 'day':
        return moment(d);
      case 'week':
        return moment(d);
      case 'thisWeek':
        return moment().day(d);
      case 'month':
        return moment().month(d);
    }
  };

  TimeSeries.prototype.setScales = function(data) {
    var hMargin, height, line, sums, times, wMargin, width, x, y;
    times = [];
    sums = [];
    wMargin = 50;
    hMargin = 25;
    width = this.graph.width - wMargin;
    height = this.graph.height - hMargin;
    _.each(data, function(x) {
      times.push(+(x.time || x.label));
      return sums.push(x.val || x.sum);
    });
    x = d3.scale.linear().domain(d3.extent(times)).range([wMargin, width]);
    y = d3.scale.linear().domain(d3.extent(sums)).range([height, hMargin]);
    line = d3.svg.line().x(function(p) {
      return +(p.time || p.label);
    }).y(function(p) {
      return p.val || p.sum;
    });
    return {
      x: x,
      y: y,
      line: line
    };
  };

  TimeSeries.prototype.drawAxes = function(scales, data) {
    var nTicks, timeFormat, xAxis, xTickData, xTicks, _ref, _ref1,
      _this = this;
    xAxis = ((_ref = this.axes) != null ? _ref.xAxis : void 0) != null ? this.axes.xAxis : this.graph.append('g').attr('class', 'ticks xTicks').attr('transform', "translate(0, " + (scales.y.range()[0]) + ")");
    if (((_ref1 = this.axes) != null ? _ref1.xTicks : void 0) != null) {
      this.axes.xTicks.remove();
    }
    nTicks = window.mobile === true ? 3 : 6;
    if (nTicks > data.length) {
      nTicks = data.length;
    }
    xTickData = scales.x.ticks(nTicks);
    if (xTickData.length === 0) {
      return;
    }
    xTicks = xAxis.selectAll('g').data(xTickData).enter().append('g').attr('class', 'tick').attr('transform', function(d) {
      return "translate(" + (scales.x(d)) + ", 0)";
    });
    timeFormat = this.timeFormat();
    xTicks.append('svg:text').text(function(d) {
      return _this.tickFormat(d).format(timeFormat);
    });
    return {
      xAxis: xAxis,
      xTicks: xTicks
    };
  };

  TimeSeries.prototype.drawTimeSeries = function(scales, data) {
    if (this.nodes != null) {
      this.nodes.remove();
    }
    this.nodes = this.graph.selectAll('.point').data(data);
    return this.nodes.enter().append('svg:circle').attr('class', 'point').attr('r', 4).attr('cx', function(d) {
      return scales.x(+(d.time || d.label));
    }).attr('cy', function(d) {
      return scales.y(d.val || d.sum);
    });
  };

  TimeSeries.prototype.render = function() {
    var data;
    data = this.view.latestTemplateData.modelData;
    if (!(data != null)) {
      return;
    }
    data = this.range === 'today' ? data.today[0].points : this.range === 'thisWeek' ? data.thisWeek : data[this.range] || data[this.range + 's'];
    this.scales = this.setScales(data);
    this.axes = this.drawAxes(this.scales, data);
    return this.timeseries = this.drawTimeSeries(this.scales, data);
  };

  return TimeSeries;

})();
