// Generated by CoffeeScript 1.3.3
var Loop, LoopView, Loops,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_.extend(Backbone.Model.prototype, {
  getValue: function(object, prop) {
    if (!object && object[prop]) {
      return null;
    } else if (_.isFunction(object[prop])) {
      return object[prop].apply(this);
    } else {
      return object[prop];
    }
  },
  get: function(attr) {
    return this.getValue(this.attributes, attr);
  }
});

Loops = (function(_super) {

  __extends(Loops, _super);

  function Loops(models, options) {
    var event, run, _ref;
    if (options == null) {
      options = {};
    }
    this.model = Loop;
    Loops.__super__.constructor.call(this, models, options);
    _ref = this.events;
    for (event in _ref) {
      run = _ref[event];
      this.on(event, run);
    }
  }

  Loops.prototype.parse = 'loops';

  Loops.prototype.localStorage = new Store('loops');

  Loops.prototype.events = {
    'add': function(model) {
      this.sync('create', model);
      return this.sync('update', this);
    }
  };

  Loops.prototype.sync = Backbone.sync.store;

  return Loops;

})(Backbone.Collection);

Loop = (function(_super) {

  __extends(Loop, _super);

  function Loop() {
    return Loop.__super__.constructor.apply(this, arguments);
  }

  Loop.prototype.defaults = {
    id: function() {
      return this.cid.match(/\d+/)[0];
    }
  };

  Loop.prototype.idAttribute = 'id()';

  return Loop;

})(Backbone.Model);

LoopView = (function(_super) {

  __extends(LoopView, _super);

  function LoopView(collection, options) {
    if (options == null) {
      options = {};
    }
    _.extend(options, this.defaults);
    LoopView.__super__.constructor.call(this, options);
    this.collection = collection;
    this.template = Hogan.compile($("#" + options.templateId).html());
  }

  LoopView.prototype.el = '#loops';

  LoopView.prototype.defaults = {
    templateId: 'loop-template'
  };

  LoopView.prototype.render = function() {
    debugger;
    var html;
    html = this.template.render();
    return this.$el.html(html);
  };

  return LoopView;

})(Backbone.View);

$(function() {
  window.loops = new Loops();
  window.loopView = new LoopView(loops).render();
  return $(document.body).addClass('show');
});
