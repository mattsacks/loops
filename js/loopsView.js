// Generated by CoffeeScript 1.3.3
var LoopsView,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

LoopsView = (function(_super) {

  __extends(LoopsView, _super);

  function LoopsView(options) {
    var attrs;
    if (options == null) {
      options = {};
    }
    attrs = _.extend({}, this.defaults, options);
    if (!(attrs.collection != null)) {
      throw new Error('No collection given');
    }
    this.preProcess();
    LoopsView.__super__.constructor.call(this, attrs);
    this.collection = this.options.collection;
    this.gather();
    this.attach();
    this.helpers = this.defineHelpers();
  }

  LoopsView.prototype.preProcess = function() {
    var addClicks,
      _this = this;
    return addClicks = (function() {
      var method, selector, _ref, _results;
      _this.clickEvent = window.mobile === true ? "tap" : "click";
      _this.clickEvents = {
        '.loop': 'view'
      };
      _ref = _this.clickEvents;
      _results = [];
      for (selector in _ref) {
        method = _ref[selector];
        _results.push(_this.events["" + _this.clickEvent + " " + selector] = method);
      }
      return _results;
    })();
  };

  LoopsView.prototype.gather = function() {
    this.element = this.$el;
    this.els = {
      "new": $('#create'),
      portability: $('#data-buttons'),
      container: $('.container')
    };
    return this.templates = {
      loops: Hogan.compile($("#" + this.options.templateId).html()),
      "new": Hogan.compile($("#" + this.options.newLoopTemplateId).html())
    };
  };

  LoopsView.prototype.attach = function() {
    var _this = this;
    _.bindAll(this, 'edit', 'view', 'delete');
    this.element.on('blur', 'input.new', function(e) {
      return _this.save.call(_this, e.target);
    });
    this.els["new"].on(this.clickEvent, function() {
      var newLoop;
      newLoop = _this.$('.new-loop input');
      if (newLoop.length > 0) {
        newLoop.blur();
      }
      return _this.collection.add([new Loop({})]);
    });
    this.collection.on('add', function(model) {
      return _this["new"](model);
    });
    this.collection.on('reset', function() {
      return _this.render();
    });
    return this.collection.on('remove', function(model) {
      return _this["delete"](model);
    });
  };

  LoopsView.prototype.el = '#loops';

  LoopsView.prototype.events = {
    'click label': 'edit'
  };

  LoopsView.prototype.defaults = {
    templateId: 'loop-template',
    newLoopTemplateId: 'loop-new-template'
  };

  LoopsView.prototype["new"] = function(model, replace) {
    var data;
    data = _.extend({}, this.helpers, model.toJSON());
    if (replace) {
      replace.outerHTML = this.templates["new"].render(data);
    } else {
      this.element.prepend(this.templates["new"].render(data));
    }
    return this.$('.new').focus();
  };

  LoopsView.prototype.save = function(el, model) {
    var $parent, value;
    $parent = $(el).parent();
    if (!(model != null)) {
      model = this.collection.get($parent.attr('id'));
    }
    if (el.value === '' && model.get('label') === void 0) {
      return this.collection.remove(model);
    } else if (el.value === '') {
      value = model.get('label');
    } else {
      value = el.value;
    }
    model.set('label', value);
    this.collection.sync('update', model);
    return this.render();
  };

  LoopsView.prototype.view = function(e) {
    var $newLoop, $prev, el, newLoop, next, prev, top;
    el = $(e.target);
    if (!el.is('li')) {
      return;
    }
    $newLoop = this.element.find('.new-loop');
    if ($newLoop[0] != null) {
      newLoop = this.collection.get($newLoop.attr('id'));
      this.save($newLoop.find('input')[0], newLoop);
      el = $("#" + e.target.id);
      e.target = el[0];
    }
    prev = e.target.previousElementSibling;
    next = e.target.nextElementSibling;
    if (el.hasClass('active')) {
      $(document.body).removeClass('viewing');
      el.siblings().css('-webkit-transform', 'translate3d(0,0,0)');
      this.els.portability.css('-webkit-transform', 'translate3d(0,0,0)');
      return el.removeClass('active').css('-webkit-transform', 'translate3d(0,-' + el.offset().top + 'px,0)');
    } else {
      el.addClass('active').css('-webkit-transform', 'translate3d(0,-' + el.offset().top + 'px,0)');
      while (prev != null) {
        $prev = $(prev);
        top = $prev.offset().top + $prev.height();
        $prev.css('-webkit-transform', 'translate3d(0,-' + top + 'px,0)');
        prev = prev.previousElementSibling;
      }
      while (next != null) {
        $(next).css('-webkit-transform', "translate3d(0," + window.innerHeight + "px,0)");
        next = next.nextElementSibling;
      }
      this.els.portability.css('-webkit-transform', "translate3d(0," + window.innerHeight + "px,0)");
      return $(document.body).addClass('viewing');
    }
  };

  LoopsView.prototype.edit = function(e) {
    var el, model;
    el = $(e.target).parent();
    if (el.hasClass('active')) {
      return;
    }
    model = this.collection.get(el.attr('id'));
    return this["new"](model, el[0]);
  };

  LoopsView.prototype["delete"] = function(model) {
    var el;
    el = $("#" + model.id);
    if (el.hasClass('active')) {
      return;
    }
    return el.remove();
  };

  LoopsView.prototype.render = function(template, data) {
    var html, templateData;
    if (template == null) {
      template = this.templates.loops;
    }
    data = data || _.sortBy(this.collection.toJSON(), function(i) {
      return -1 * this.get(i.id).cid.slice(1);
    }, this.collection);
    templateData = _.extend({}, this.helpers, {
      loops: data
    });
    this.latestTemplateData = templateData;
    html = template.render(templateData);
    this.element.html(html);
    this.postRender();
    return this;
  };

  LoopsView.prototype.postRender = function() {
    var height;
    this.els.loops = this.element.find('.loop');
    if (this.collection.models.length > 0) {
      this.els.portability.addClass('show');
    } else {
      this.els.portability.removeClass('show');
    }
    height = this.els.loops.length * this.els.loops.height();
    if (window.mobile === true && height >= 460) {
      return this.els.container.css({
        height: height + 130,
        'max-height': height + 130
      });
    }
  };

  LoopsView.prototype.defineHelpers = function() {
    var thiz;
    thiz = this;
    return {
      placeholder: function() {
        return this.label || 'Loop Name';
      }
    };
  };

  return LoopsView;

})(Backbone.View);
