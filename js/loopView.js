// Generated by CoffeeScript 1.3.3
var LoopView,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

LoopView = (function(_super) {

  __extends(LoopView, _super);

  function LoopView(collection, options) {
    if (options == null) {
      options = {};
    }
    _.extend(options, this.defaults);
    LoopView.__super__.constructor.call(this, options);
    this.collection = collection;
    this.template = Hogan.compile($("#" + options.templateId).html());
    this.gather();
    this.attach();
  }

  LoopView.prototype.gather = function() {
    this.element = this.$el;
    this.els = {
      "new": $('#create')
    };
    return this.templates = {
      "new": $('#loop-new-template').html()
    };
  };

  LoopView.prototype.attach = function() {
    var _this = this;
    _.bindAll(this, 'edit', 'view', 'delete');
    this.element.on('blur', 'input.new', function(e) {
      return _this.save.call(_this, e.target);
    });
    this.els["new"].on('click', function() {
      return _this.collection.add([new Loop({})]);
    });
    this.collection.on('add', function(model) {
      return _this["new"](model);
    });
    this.collection.on('update', function() {
      return _this.render();
    });
    this.collection.on('remove', function() {
      return _this.render();
    });
    return this.collection.on('reset', function() {
      return _this.render();
    });
  };

  LoopView.prototype.el = '#loops';

  LoopView.prototype.events = {
    'click .loop': 'view',
    'click label': 'edit',
    'swipeLeft .loop': 'delete'
  };

  LoopView.prototype.defaults = {
    templateId: 'loop-template'
  };

  LoopView.prototype["new"] = function(model, replace) {
    var data, template;
    template = Hogan.compile(this.templates["new"]);
    data = _.extend({}, this.helpers, model.toJSON());
    if (replace) {
      replace.outerHTML = template.render(data);
    } else {
      this.element.prepend(template.render(data));
    }
    return this.$('.new').focus();
  };

  LoopView.prototype.save = function(el, model) {
    var value;
    if (!(model != null)) {
      model = this.collection.get($(el).parent().attr('id'));
    }
    if (el.value === '' && model.get('label') === void 0) {
      return this.collection.remove(model);
    } else if (el.value === '') {
      value = model.get('label');
    } else {
      value = el.value;
    }
    model.set('label', value);
    this.collection.sync('update', model);
    this.collection.save();
    return this.collection.trigger('update');
  };

  LoopView.prototype.view = function(e) {
    var $prev, el, next, prev, top;
    el = $(e.target);
    if (!el.is('li')) {
      return;
    }
    prev = e.target.previousElementSibling;
    next = e.target.nextElementSibling;
    if (el.hasClass('active')) {
      $(document.body).removeClass('viewing');
      el.siblings().css('-webkit-transform', 'translate3d(0,0,0)');
      return el.removeClass('active').css('-webkit-transform', 'translate3d(0,-' + el.offset().top + 'px,0)');
    } else {
      $(document.body).addClass('viewing');
      while (prev != null) {
        $prev = $(prev);
        top = $prev.offset().top + $prev.height();
        $prev.css('-webkit-transform', 'translate3d(0,-' + top + 'px,0)');
        prev = prev.previousElementSibling;
      }
      while (next != null) {
        $(next).css('-webkit-transform', "translate3d(0," + window.innerHeight + "px,0)");
        next = next.nextElementSibling;
      }
      return el.addClass('active').css('-webkit-transform', 'translate3d(0,-' + el.offset().top + 'px,0)');
    }
  };

  LoopView.prototype.edit = function(e) {
    var el, model;
    el = $(e.target).parent();
    model = this.collection.get(el.attr('id'));
    return this["new"](model, el[0]);
  };

  LoopView.prototype["delete"] = function(e) {
    var el;
    el = $(e.target);
    if (el.hasClass('active')) {
      return;
    }
    el.remove();
    this.collection.remove(el.attr('id'));
    return this.save();
  };

  LoopView.prototype.render = function(template, data) {
    var html, templateData;
    if (template == null) {
      template = this.template;
    }
    data = data || _.sortBy(this.collection.toJSON(), function(i) {
      return -1 * this.get(i.id).cid.slice(1);
    }, this.collection);
    templateData = _.extend({}, this.helpers, {
      loops: data
    });
    html = template.render(templateData);
    this.element.html(html);
    this.postRender();
    return this;
  };

  LoopView.prototype.helpers = {
    placeholder: function() {
      return this.label || 'Loop Name';
    }
  };

  return LoopView;

})(Backbone.View);
