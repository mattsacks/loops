// Generated by CoffeeScript 1.3.3
var LoopView,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

LoopView = (function(_super) {

  __extends(LoopView, _super);

  function LoopView(options) {
    var modoptions;
    if (options == null) {
      options = {};
    }
    modoptions = _.extend({}, this.defaults, options);
    LoopView.__super__.constructor.call(this, modoptions);
    this.gather();
    this.attach();
  }

  LoopView.prototype.defaults = {
    loopTemplate: $('#loop-detail-template').html(),
    menuTemplate: $('#loop-menu-template').html()
  };

  LoopView.prototype.el = '#loop';

  LoopView.prototype.events = {};

  LoopView.prototype.gather = function() {
    this.templates = {
      loop: this.options.loopTemplate,
      menu: this.options.menuTemplate
    };
    this.element = this.$el;
    return this.els = {
      "delete": $('#delete'),
      menu: $('#loop-menu'),
      buttons: $('#loop-buttons')
    };
  };

  LoopView.prototype.attach = function() {
    var run, selector, _ref,
      _this = this;
    _.bindAll(this, 'edit', 'mod');
    this.clickEvent = window.mobile === true ? "tap" : "click";
    this.buttonEvents = {
      '#amount': {
        method: "edit",
        args: ["amount"]
      },
      '#subtract': {
        method: "mod",
        args: ["amount", -1]
      },
      '#add': {
        method: "mod",
        args: ["amount", 1]
      }
    };
    _ref = this.buttonEvents;
    for (selector in _ref) {
      run = _ref[selector];
      this.els.buttons.on(this.clickEvent, selector, _.bind.apply(_, [this[run.method], this].concat(__slice.call(run.args))));
    }
    this.els["delete"].on(this.clickEvent, _.bind(this.menu, this, 'delete', ''));
    return $(document).on(this.clickEvent, "body.menu", function(e) {
      var $body, el, id, operation, _base, _name;
      el = $(e.target);
      id = el.attr('id');
      $body = $(document.body);
      if (!$body.hasClass('viewing')) {
        $body.removeClass(_this.menuClass);
      } else if ($body.hasClass('mod')) {
        '';

      } else if (el.parent().attr('id') !== 'menu-buttons' && !el.hasClass('button')) {
        $body.removeClass(_this.menuClass);
      }
      if (el.is('.loop-item')) {
        return;
      }
      operation = $body.attr('class').match(/menu-(\w+)/)[1];
      return typeof (_base = _this.helpers[operation])[_name = "on" + id] === "function" ? _base[_name]() : void 0;
    });
  };

  LoopView.prototype.edit = function(prop) {};

  LoopView.prototype.mod = function(prop, amount) {
    var val;
    val = (this.model.get(prop) || 0) + amount;
    this.els[prop].html(val);
    this.model.set(prop, val);
    return this.menu('save', 'mod');
  };

  LoopView.prototype.menu = function(operation, menu) {
    var html;
    if (menu == null) {
      menu = '';
    }
    this.menuClass = "menu menu-" + operation + " " + menu;
    html = Mustache.render(this.templates.menu, this.helpers[operation]);
    this.els.menu.html(html);
    return $(document.body).addClass(this.menuClass);
  };

  LoopView.prototype["delete"] = function() {
    var $parent, els, properRemove;
    $parent = $("#" + (this.model.get('id')));
    properRemove = function(e) {
      var $this;
      $this = $(this);
      if ($this.is('li')) {
        $this.remove();
      } else {
        $this.html('');
      }
      return $this.off(e.type, properRemove);
    };
    els = $parent.add(this.element);
    els.on({
      'webkitTransitionEnd': properRemove,
      'transitionEnd': properRemove
    });
    loopsView.view({
      target: $parent
    });
    els.addClass('delete');
    return this.collection.remove(this.model.get('id'));
  };

  LoopView.prototype.save = function() {
    var data, point;
    point = {
      val: this.model.get('amount'),
      time: +new Date()
    };
    data = this.model.get('data');
    data[this.currentPoint || point.time] = point.val;
    this.model.set('data', data);
    this.collection.save();
    this.cancel();
    return this.render();
  };

  LoopView.prototype.cancel = function() {
    this.model.set('amount', 0);
    this.els.amount.html(0);
    $(document.body).removeClass(this.menuClass);
    return this.menuClass = '';
  };

  LoopView.prototype.render = function(template, model) {
    if (template == null) {
      template = this.templates.loop;
    }
    this.model = model != null ? model : this.model;
    debugger;
    if (!(this.helpers != null)) {
      this.helpers = this.defineHelpers();
    }
    if (this.model.get('amount') !== 0) {
      this.menu('save', 'mod');
    }
    this.latestTemplateData = _.extend({}, this.helpers, this.model.attributes);
    this.element.html(Mustache.render(template, this.latestTemplateData));
    this.postRender();
    return this.trigger('render', this, model);
  };

  LoopView.prototype.postRender = function() {
    return _.extend(this.els, {
      amount: this.element.find('#amount')
    });
  };

  LoopView.prototype.restore = function(model) {
    this.model = model;
    return this.trigger('restore', this.model);
  };

  LoopView.prototype.defineHelpers = function() {
    var thiz,
      _this = this;
    thiz = this;
    return {
      "delete": {
        oncancel: function() {
          return $(document.body).removeClass(_this.menuClass);
        },
        cancel: "Cancel",
        onsave: _.bind(this["delete"], this),
        save: "Delete"
      },
      save: {
        oncancel: _.bind(this.cancel, this),
        cancel: "Cancel",
        onsave: _.bind(this.save, this),
        save: "Save"
      },
      currents: function() {
        var collection, current, data, interesting, _i, _len;
        data = _this.model.collect();
        if (!(data != null)) {
          return;
        }
        interesting = [data.today, data.weeks, data.months];
        current = _.map(interesting, function(x) {
          return _.last(x);
        });
        for (_i = 0, _len = current.length; _i < _len; _i++) {
          collection = current[_i];
          collection.headline = (function() {
            switch (collection.by) {
              case 'hour':
                return 'Today';
              case 'week':
                return 'This Week';
              case 'month':
                return 'This Month';
            }
          })();
        }
        return current;
      },
      amount: function() {
        return _this.model.attributes.amount || 0;
      }
    };
  };

  return LoopView;

})(Backbone.View);
